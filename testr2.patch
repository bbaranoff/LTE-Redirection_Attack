Binary files code/.git/index and openlte/.git/index differ
diff -ru code/.git/logs/HEAD openlte/.git/logs/HEAD
--- code/.git/logs/HEAD	2025-05-30 14:59:22.329953607 +0000
+++ openlte/.git/logs/HEAD	2025-05-29 14:27:21.972211276 +0000
@@ -1,2 +1,2 @@
-0000000000000000000000000000000000000000 cf7b450709a18fa8884ee1896892ccc3780f5f0f root <root@badfaf2e7d92.(none)> 1748616997 +0000	clone: from https://git.code.sf.net/p/openlte/code
-cf7b450709a18fa8884ee1896892ccc3780f5f0f a5a66ed660e6094a9f50f7e00a0e9805dfbac724 root <root@badfaf2e7d92.(none)> 1748617162 +0000	checkout: moving from master to a5a66e
+0000000000000000000000000000000000000000 cf7b450709a18fa8884ee1896892ccc3780f5f0f root <root@buildkitsandbox.(none)> 1748528067 +0000	clone: from https://git.code.sf.net/p/openlte/code
+cf7b450709a18fa8884ee1896892ccc3780f5f0f a5a66ed660e6094a9f50f7e00a0e9805dfbac724 root <root@buildkitsandbox.(none)> 1748528841 +0000	checkout: moving from master to a5a66e
diff -ru code/.git/logs/refs/heads/master openlte/.git/logs/refs/heads/master
--- code/.git/logs/refs/heads/master	2025-05-30 14:56:37.571794095 +0000
+++ openlte/.git/logs/refs/heads/master	2025-05-29 14:14:27.092361707 +0000
@@ -1 +1 @@
-0000000000000000000000000000000000000000 cf7b450709a18fa8884ee1896892ccc3780f5f0f root <root@badfaf2e7d92.(none)> 1748616997 +0000	clone: from https://git.code.sf.net/p/openlte/code
+0000000000000000000000000000000000000000 cf7b450709a18fa8884ee1896892ccc3780f5f0f root <root@buildkitsandbox.(none)> 1748528067 +0000	clone: from https://git.code.sf.net/p/openlte/code
diff -ru code/.git/logs/refs/remotes/origin/HEAD openlte/.git/logs/refs/remotes/origin/HEAD
--- code/.git/logs/refs/remotes/origin/HEAD	2025-05-30 14:56:37.571794095 +0000
+++ openlte/.git/logs/refs/remotes/origin/HEAD	2025-05-29 14:14:27.092361707 +0000
@@ -1 +1 @@
-0000000000000000000000000000000000000000 cf7b450709a18fa8884ee1896892ccc3780f5f0f root <root@badfaf2e7d92.(none)> 1748616997 +0000	clone: from https://git.code.sf.net/p/openlte/code
+0000000000000000000000000000000000000000 cf7b450709a18fa8884ee1896892ccc3780f5f0f root <root@buildkitsandbox.(none)> 1748528067 +0000	clone: from https://git.code.sf.net/p/openlte/code
Only in code/.git/objects/pack: pack-42157ab420f9d77876634a8178d6facfe55baa9b.idx
Only in code/.git/objects/pack: pack-42157ab420f9d77876634a8178d6facfe55baa9b.pack
Only in openlte/.git/objects/pack: pack-bd3c7726e639c074cd3a56d71b50b848e617c8af.idx
Only in openlte/.git/objects/pack: pack-bd3c7726e639c074cd3a56d71b50b848e617c8af.pack
diff -ru code/LTE_fdd_enodeb/hdr/LTE_fdd_enb_mme.h openlte/LTE_fdd_enodeb/hdr/LTE_fdd_enb_mme.h
--- code/LTE_fdd_enodeb/hdr/LTE_fdd_enb_mme.h	2025-05-30 14:59:22.322953554 +0000
+++ openlte/LTE_fdd_enodeb/hdr/LTE_fdd_enb_mme.h	2025-05-30 14:37:47.789556253 +0000
@@ -105,6 +105,7 @@
 
     // Message Parsers
     void parse_attach_complete(LIBLTE_BYTE_MSG_STRUCT *msg, LTE_fdd_enb_user *user, LTE_fdd_enb_rb *rb);
+    void parse_tracking_area_update_request(LIBLTE_BYTE_MSG_STRUCT *msg, LTE_fdd_enb_user **user, LTE_fdd_enb_rb **rb);
     void parse_attach_request(LIBLTE_BYTE_MSG_STRUCT *msg, LTE_fdd_enb_user **user, LTE_fdd_enb_rb **rb);
     void parse_authentication_failure(LIBLTE_BYTE_MSG_STRUCT *msg, LTE_fdd_enb_user *user, LTE_fdd_enb_rb *rb);
     void parse_authentication_response(LIBLTE_BYTE_MSG_STRUCT *msg, LTE_fdd_enb_user *user, LTE_fdd_enb_rb *rb);
@@ -119,11 +120,13 @@
 
     // State Machines
     void attach_sm(LTE_fdd_enb_user *user, LTE_fdd_enb_rb *rb);
+    void tau_sm(LTE_fdd_enb_user *user, LTE_fdd_enb_rb *rb);
     void service_req_sm(LTE_fdd_enb_user *user, LTE_fdd_enb_rb *rb);
     void detach_sm(LTE_fdd_enb_user *user, LTE_fdd_enb_rb *rb);
 
     // Message Senders
     void send_attach_accept(LTE_fdd_enb_user *user, LTE_fdd_enb_rb *rb);
+    void send_tracking_area_update_reject(LTE_fdd_enb_user *user, LTE_fdd_enb_rb *rb);
     void send_attach_reject(LTE_fdd_enb_user *user, LTE_fdd_enb_rb *rb);
     void send_authentication_reject(LTE_fdd_enb_user *user, LTE_fdd_enb_rb *rb);
     void send_authentication_request(LTE_fdd_enb_user *user, LTE_fdd_enb_rb *rb);
diff -ru code/LTE_fdd_enodeb/hdr/LTE_fdd_enb_rb.h openlte/LTE_fdd_enodeb/hdr/LTE_fdd_enb_rb.h
--- code/LTE_fdd_enodeb/hdr/LTE_fdd_enb_rb.h	2025-05-30 14:59:22.322953554 +0000
+++ openlte/LTE_fdd_enodeb/hdr/LTE_fdd_enb_rb.h	2025-05-30 14:23:33.126072588 +0000
@@ -98,18 +98,21 @@
 
 typedef enum{
     LTE_FDD_ENB_MME_PROC_IDLE = 0,
+    LTE_FDD_ENB_MME_PROC_TAU_REQUEST,
     LTE_FDD_ENB_MME_PROC_ATTACH,
     LTE_FDD_ENB_MME_PROC_SERVICE_REQUEST,
     LTE_FDD_ENB_MME_PROC_DETACH,
     LTE_FDD_ENB_MME_PROC_N_ITEMS,
 }LTE_FDD_ENB_MME_PROC_ENUM;
 static const char LTE_fdd_enb_mme_proc_text[LTE_FDD_ENB_MME_PROC_N_ITEMS][100] = {"IDLE",
+										  "TAU REQUEST",
                                                                                   "ATTACH",
                                                                                   "SERVICE REQUEST",
                                                                                   "DETACH"};
 
 typedef enum{
     LTE_FDD_ENB_MME_STATE_IDLE = 0,
+    LTE_FDD_ENB_MME_STATE_TAU_REJECT,
     LTE_FDD_ENB_MME_STATE_ID_REQUEST_IMSI,
     LTE_FDD_ENB_MME_STATE_REJECT,
     LTE_FDD_ENB_MME_STATE_AUTHENTICATE,
@@ -125,6 +128,7 @@
     LTE_FDD_ENB_MME_STATE_N_ITEMS,
 }LTE_FDD_ENB_MME_STATE_ENUM;
 static const char LTE_fdd_enb_mme_state_text[LTE_FDD_ENB_MME_STATE_N_ITEMS][100] = {"IDLE",
+                                                                                    "TAU REJECT",
                                                                                     "ID REQUEST IMSI",
                                                                                     "REJECT",
                                                                                     "AUTHENTICATE",
diff -ru code/LTE_fdd_enodeb/src/LTE_fdd_enb_mme.cc openlte/LTE_fdd_enodeb/src/LTE_fdd_enb_mme.cc
--- code/LTE_fdd_enodeb/src/LTE_fdd_enb_mme.cc	2025-05-30 14:59:22.323953562 +0000
+++ openlte/LTE_fdd_enodeb/src/LTE_fdd_enb_mme.cc	2025-05-30 15:25:58.994482136 +0000
@@ -44,7 +44,7 @@
     03/11/2015    Ben Wojtowicz    Added detach handling.
     07/25/2015    Ben Wojtowicz    Using the latest liblte and changed the
                                    dedicated bearer QoS to 9.
-    12/06/2015    Ben Wojtowicz    Changed boost::mutex to pthread_mutex_t and
+    12/06/2015    Ben Wojtowicz    Changed boost::mutex to pthread_mutex_t an
                                    sem_t and changed the user deletion and
                                    C-RNTI release procedures.
     02/13/2016    Ben Wojtowicz    Properly initialize present flags and change
@@ -259,6 +259,8 @@
                                       __FILE__,
                                       __LINE__,
                                       "Not handling Tracking Area Update Request");
+            parse_tracking_area_update_request(msg, &nas_msg->user, &nas_msg->rb);
+
             break;
         case LIBLTE_MME_MSG_TYPE_UPLINK_NAS_TRANSPORT:
             interface->send_debug_msg(LTE_FDD_ENB_DEBUG_TYPE_ERROR,
@@ -373,6 +375,9 @@
         // Call the appropriate state machine
         switch(nas_msg->rb->get_mme_procedure())
         {
+        case LTE_FDD_ENB_MME_PROC_TAU_REQUEST:
+            tau_sm(nas_msg->user, nas_msg->rb);
+        break;
         case LTE_FDD_ENB_MME_PROC_ATTACH:
             attach_sm(nas_msg->user, nas_msg->rb);
             break;
@@ -382,6 +387,7 @@
         case LTE_FDD_ENB_MME_PROC_DETACH:
             detach_sm(nas_msg->user, nas_msg->rb);
             break;
+
         default:
             interface->send_debug_msg(LTE_FDD_ENB_DEBUG_TYPE_ERROR,
                                       LTE_FDD_ENB_DEBUG_LEVEL_MME,
@@ -430,6 +436,13 @@
             break;
         }
         break;
+
+    case LTE_FDD_ENB_MME_PROC_TAU_REQUEST:
+        rrc_cmd_resp->rb->set_mme_state(LTE_FDD_ENB_MME_STATE_TAU_REJECT);
+        tau_sm(rrc_cmd_resp->user, rrc_cmd_resp->rb);
+
+
+
     default:
         interface->send_debug_msg(LTE_FDD_ENB_DEBUG_TYPE_ERROR,
                                   LTE_FDD_ENB_DEBUG_LEVEL_MME,
@@ -655,6 +668,38 @@
         }
     }
 }
+void LTE_fdd_enb_mme::parse_tracking_area_update_request(LIBLTE_BYTE_MSG_STRUCT  *msg,
+                                           LTE_fdd_enb_user       **user,
+                                           LTE_fdd_enb_rb         **rb)
+{
+    LTE_fdd_enb_hss                      *hss       = LTE_fdd_enb_hss::get_instance();
+    LTE_fdd_enb_user_mgr                 *user_mgr  = LTE_fdd_enb_user_mgr::get_instance();
+    LTE_fdd_enb_user                     *act_user;
+    LIBLTE_MME_TRACKING_AREA_UPDATE_REQUEST_MSG_STRUCT  attach_req;
+    uint64                                imsi_num = 0;
+    uint64                                imei_num = 0;
+    uint32                                i;
+    uint8                                 pd;
+    uint8                                 msg_type;
+
+    interface->send_debug_msg(LTE_FDD_ENB_DEBUG_TYPE_INFO,
+                              LTE_FDD_ENB_DEBUG_LEVEL_MME,
+                              __FILE__,
+                              __LINE__,
+                              "Received Attach Request for RNTI=%u and RB=%s",
+                              (*user)->get_c_rnti(),
+                              LTE_fdd_enb_rb_text[(*rb)->get_rb_id()]);
+
+    // Unpack the message
+    liblte_mme_unpack_tracking_area_update_request_msg(msg, &attach_req);
+
+
+(*rb) -> set_mme_procedure(LTE_FDD_ENB_MME_PROC_TAU_REQUEST);
+(*rb) -> set_mme_state(LTE_FDD_ENB_MME_STATE_TAU_REJECT);
+//send_tracking_area_update_reject(*user,*rb);
+}
+
+
 void LTE_fdd_enb_mme::parse_authentication_failure(LIBLTE_BYTE_MSG_STRUCT *msg,
                                                    LTE_fdd_enb_user       *user,
                                                    LTE_fdd_enb_rb         *rb)
@@ -1195,6 +1240,8 @@
         user->prepare_for_deletion();
         send_attach_reject(user, rb);
         break;
+
+
     case LTE_FDD_ENB_MME_STATE_AUTHENTICATE:
         send_authentication_request(user, rb);
         break;
@@ -1219,6 +1266,9 @@
     case LTE_FDD_ENB_MME_STATE_ATTACHED:
         send_emm_information(user, rb);
         break;
+    case LTE_FDD_ENB_MME_STATE_TAU_REJECT:
+        send_tracking_area_update_reject(user, rb);
+        break;
     default:
         interface->send_debug_msg(LTE_FDD_ENB_DEBUG_TYPE_ERROR,
                                   LTE_FDD_ENB_DEBUG_LEVEL_MME,
@@ -1231,6 +1281,14 @@
         break;
     }
 }
+void LTE_fdd_enb_mme::tau_sm(LTE_fdd_enb_user *user,
+                                LTE_fdd_enb_rb   *rb)
+{
+    LTE_fdd_enb_hss      *hss      = LTE_fdd_enb_hss::get_instance();
+    LTE_fdd_enb_user_mgr *user_mgr = LTE_fdd_enb_user_mgr::get_instance();
+
+        send_tracking_area_update_reject(user, rb);
+}
 void LTE_fdd_enb_mme::service_req_sm(LTE_fdd_enb_user *user,
                                      LTE_fdd_enb_rb   *rb)
 {
@@ -1397,6 +1455,52 @@
                       (LTE_FDD_ENB_MESSAGE_UNION *)&cmd_ready,
                       sizeof(LTE_FDD_ENB_RRC_CMD_READY_MSG_STRUCT));
 }
+
+
+
+
+void LTE_fdd_enb_mme::send_tracking_area_update_reject(LTE_fdd_enb_user *user,
+                                         LTE_fdd_enb_rb   *rb)
+{
+    LTE_FDD_ENB_RRC_NAS_MSG_READY_MSG_STRUCT nas_msg_ready;
+    LIBLTE_MME_TRACKING_AREA_UPDATE_REJECT_MSG_STRUCT      ta_update_rej;
+    LIBLTE_BYTE_MSG_STRUCT                   msg;
+     ta_update_rej.emm_cause = 9;
+     ta_update_rej.t3446_present = false;
+     liblte_mme_pack_tracking_area_update_reject_msg(
+     &ta_update_rej,
+     LIBLTE_MME_SECURITY_HDR_TYPE_PLAIN_NAS,
+     user->get_auth_vec()->k_nas_int,
+     user->get_auth_vec()->nas_count_dl,
+     LIBLTE_SECURITY_DIRECTION_DOWNLINK,
+     &msg);
+    // Queue the NAS message for RRC
+    rb->queue_rrc_nas_msg(&msg);
+
+    // Signal RRC for NAS message
+    nas_msg_ready.user = user;
+    nas_msg_ready.rb   = rb;
+    msgq_to_rrc->send(LTE_FDD_ENB_MESSAGE_TYPE_RRC_NAS_MSG_READY,
+                      LTE_FDD_ENB_DEST_LAYER_RRC,
+                      (LTE_FDD_ENB_MESSAGE_UNION *)&nas_msg_ready,
+                      sizeof(LTE_FDD_ENB_RRC_NAS_MSG_READY_MSG_STRUCT));
+
+    //send_rrc_command(user, rb, LTE_FDD_ENB_RRC_CMD_RELEASE);
+// Unpack the message
+    liblte_mme_unpack_tracking_area_update_reject_msg(&msg, &ta_update_rej);
+
+    interface->send_ctrl_info_msg("user fully attached imsi=%s imei=%s",
+                                  user->get_imsi_str().c_str(),
+                                  user->get_imei_str().c_str());
+
+    rb->set_mme_state(LTE_FDD_ENB_MME_STATE_TAU_REJECT);
+}
+
+
+
+
+
+
 void LTE_fdd_enb_mme::send_attach_reject(LTE_fdd_enb_user *user,
                                          LTE_fdd_enb_rb   *rb)
 {
@@ -1412,7 +1516,7 @@
         imsi_num = user->get_temp_id();
     }
 
-    attach_rej.emm_cause           = user->get_emm_cause();
+    attach_rej.emm_cause           = 17;
     attach_rej.esm_msg_present     = false;
     attach_rej.t3446_value_present = false;
     liblte_mme_pack_attach_reject_msg(&attach_rej, &msg);
diff -ru code/LTE_fdd_enodeb/src/LTE_fdd_enb_radio.cc openlte/LTE_fdd_enodeb/src/LTE_fdd_enb_radio.cc
--- code/LTE_fdd_enodeb/src/LTE_fdd_enb_radio.cc	2025-05-30 14:59:22.324953570 +0000
+++ openlte/LTE_fdd_enodeb/src/LTE_fdd_enb_radio.cc	2025-05-30 14:23:33.126072588 +0000
@@ -1,4 +1,4 @@
-#line 2 "LTE_fdd_enb_radio.cc" // Make __FILE__ omit the path
+// Make __FILE__ omit the path
 /*******************************************************************************
 
     Copyright 2013-2017 Ben Wojtowicz
@@ -229,7 +229,7 @@
     try
     {
         // Setup the USRP
-        if(devs[idx-1]["type"] == "x300")
+        if(devs[idx-1]["type"] == "uhd")
         {
             devs[idx-1]["master_clock_rate"] = "184320000";
             master_clock_set                 = true;
@@ -252,7 +252,6 @@
             usrp->set_rx_freq((double)liblte_interface_ul_earfcn_to_frequency(ul_earfcn));
             usrp->set_tx_gain(tx_gain);
             usrp->set_rx_gain(rx_gain);
-
             // Setup the TX and RX streams
             tx_stream  = usrp->get_tx_stream(stream_args);
             rx_stream  = usrp->get_rx_stream(stream_args);
@@ -822,7 +821,7 @@
         buffer_size = 1024;
     }
     status = bladerf_sync_config(bladerf,
-                                 BLADERF_MODULE_TX,
+                                BLADERF_TX_X1,
                                  BLADERF_FORMAT_SC16_Q11_META,
                                  BLADERF_NUM_BUFFERS,
                                  buffer_size,
@@ -842,7 +841,7 @@
 
     // Setup sync RX
     status = bladerf_sync_config(bladerf,
-                                 BLADERF_MODULE_RX,
+                                BLADERF_RX_X1,
                                  BLADERF_FORMAT_SC16_Q11_META,
                                  BLADERF_NUM_BUFFERS,
                                  buffer_size,
@@ -974,7 +973,7 @@
     if(radio_params->init_needed)
     {
         // Assume RX_timestamp and TX_timestamp difference is 0
-        bladerf_get_timestamp(bladerf, BLADERF_MODULE_RX, (uint64_t*)&rx_ts);
+        bladerf_get_timestamp(bladerf, BLADERF_RX, (uint64_t*)&rx_ts);
         next_tx_ts            = rx_ts + radio_params->samp_rate; // 1 second to make sure everything is setup
         metadata_rx.flags     = 0;
         metadata_rx.timestamp = next_tx_ts - (radio_params->N_samps_per_subfr*2); // Retard RX by 2 subframes
Only in openlte/: build
diff -ru code/liblte/hdr/liblte_rrc.h openlte/liblte/hdr/liblte_rrc.h
--- code/liblte/hdr/liblte_rrc.h	2025-05-30 14:59:22.325953577 +0000
+++ openlte/liblte/hdr/liblte_rrc.h	2025-05-30 14:23:33.127072593 +0000
@@ -5994,7 +5994,7 @@
 // Defines
 // Enums
 typedef enum{
-    LIBLTE_RRC_RELEASE_CAUSE_LOAD_BALANCING_TAU_REQUIRED = 0,
+    LIBLTE_RRC_RELEASE_CAUSE_LOAD_BALANCING_TAU_REQUIRED = 1,
     LIBLTE_RRC_RELEASE_CAUSE_OTHER,
     LIBLTE_RRC_RELEASE_CAUSE_CS_FALLBACK_HIGH_PRIORITY,
     LIBLTE_RRC_RELEASE_CAUSE_SPARE1,
diff -ru code/liblte/src/liblte_rrc.cc openlte/liblte/src/liblte_rrc.cc
--- code/liblte/src/liblte_rrc.cc	2025-05-30 14:59:22.328953600 +0000
+++ openlte/liblte/src/liblte_rrc.cc	2025-05-30 14:23:33.128072598 +0000
@@ -11698,13 +11698,28 @@
         liblte_value_2_bits(0, &msg_ptr, 2);
 
         // Optional indicators
-        liblte_value_2_bits(0, &msg_ptr, 1);
+        liblte_value_2_bits(1, &msg_ptr, 1);
         liblte_value_2_bits(0, &msg_ptr, 1);
         liblte_value_2_bits(0, &msg_ptr, 1);
 
         // Release cause
         liblte_value_2_bits(con_release->release_cause, &msg_ptr, 2);
 
+// redirectedcarrierinfo
+// geran // choice
+liblte_value_2_bits(1, &msg_ptr, 4);
+// arfcn no.
+liblte_value_2_bits(514, &msg_ptr, 10);
+// dcs1800
+liblte_value_2_bits(0, &msg_ptr, 1);
+// Choice of following ARFCN
+liblte_value_2_bits(0, &msg_ptr, 2);
+// explicit list
+liblte_value_2_bits(1, &msg_ptr, 5);
+// arfcn no.
+liblte_value_2_bits(514, &msg_ptr, 10);
+// Note that total bits should be octet aligned,
+// if not, pad it with zeros.
         // Fill in the number of bits used
         msg->N_bits = msg_ptr - msg->msg;
 
Only in openlte/: samp_rate
Only in openlte/: test123.patch
Only in code/: testr.patch
Only in openlte/: uhd.patch
